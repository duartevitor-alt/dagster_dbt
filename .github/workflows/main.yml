name: Create Tag

on:
  push:
    branches: main

jobs:
  tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Fetch all branches
        run: git fetch --all

      - name: Get release branches
        id: get_release_branches
        run: |
          release_branches=$(git branch -r | grep -o 'origin/release/.*' | sed 's|origin/release/||')
          release_branches=$(echo "$release_branches" | tr '\n' ' ')
          echo "release_branches=${release_branches}" >> $GITHUB_ENV


      - name: Sort release branches and get latest
        id: sort_release_branches
        run: |
          sorted_branches=$(echo "${{ env.release_branches }}" | tr ' ' '\n' | sort -V)
          echo "Sorted branches: $sorted_branches"
          latest_release=$(echo "$sorted_branches" | tail -n 1)
          echo "latest_release=$latest_release" >> $GITHUB_ENV

      - name: Determine source branch of the merge
        id: source-branch
        run: |
          echo "Determining source branch..."
          # Fetch all remote branches to ensure we have all references
          git fetch origin
          # Find the merge commit parent
          COMMIT_BEFORE=$(git rev-parse HEAD^1)
          echo "Commit before: $COMMIT_BEFORE"
          # Check which branches contain the parent commit
          SOURCE_BRANCH=$(git branch -r --contains $COMMIT_BEFORE | grep -v 'main' | head -n 1 | sed 's/.*origin\///')
          echo "Source branch: $SOURCE_BRANCH"
          echo "::set-output name=branch::$SOURCE_BRANCH"

      - name: Check if source branch is hotfix and create tag
        if: steps.source-branch.outputs.branch == 'hotfix'
        run: |
          latest_release=${{ env.latest_release }}
          IFS='.' read -r -a version_parts <<< "$latest_release"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}
          
          # Increment the patch version
          patch=$((patch + 1))
          
          # Form the new version string
          new_version="v$major.$minor.$patch"
          git tag $new_version
          git push origin $new_version

      - name: create tag if not from hotfix
        if: steps.source-branch.outputs.branch != 'hotfix'
        run: |
          latest_release=v${{ env.latest_release }}
          git tag $latest_release
          git push origin $latest_release
